# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import MicroServiceTask_pb2 as MicroServiceTask__pb2


class ApiServiceStub(object):
    """Api Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login = channel.unary_unary(
                '/MicroSerice.ApiService/login',
                request_serializer=MicroServiceTask__pb2.LoginRequest.SerializeToString,
                response_deserializer=MicroServiceTask__pb2.LoginResponse.FromString,
                )
        self.hello = channel.unary_unary(
                '/MicroSerice.ApiService/hello',
                request_serializer=MicroServiceTask__pb2.NoType.SerializeToString,
                response_deserializer=MicroServiceTask__pb2.GreetingResponse.FromString,
                )
        self.logout = channel.unary_unary(
                '/MicroSerice.ApiService/logout',
                request_serializer=MicroServiceTask__pb2.AuthenticationToken.SerializeToString,
                response_deserializer=MicroServiceTask__pb2.LogoutResponse.FromString,
                )


class ApiServiceServicer(object):
    """Api Service
    """

    def login(self, request, context):
        """rpc login method
        POST Client credentials & GET Session Token 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hello(self, request, context):
        """GET Client Greating 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """GET Client Logout 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=MicroServiceTask__pb2.LoginRequest.FromString,
                    response_serializer=MicroServiceTask__pb2.LoginResponse.SerializeToString,
            ),
            'hello': grpc.unary_unary_rpc_method_handler(
                    servicer.hello,
                    request_deserializer=MicroServiceTask__pb2.NoType.FromString,
                    response_serializer=MicroServiceTask__pb2.GreetingResponse.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=MicroServiceTask__pb2.AuthenticationToken.FromString,
                    response_serializer=MicroServiceTask__pb2.LogoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MicroSerice.ApiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApiService(object):
    """Api Service
    """

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MicroSerice.ApiService/login',
            MicroServiceTask__pb2.LoginRequest.SerializeToString,
            MicroServiceTask__pb2.LoginResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MicroSerice.ApiService/hello',
            MicroServiceTask__pb2.NoType.SerializeToString,
            MicroServiceTask__pb2.GreetingResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MicroSerice.ApiService/logout',
            MicroServiceTask__pb2.AuthenticationToken.SerializeToString,
            MicroServiceTask__pb2.LogoutResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthServiceStub(object):
    """Authenticate Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.authenticate = channel.unary_unary(
                '/MicroSerice.AuthService/authenticate',
                request_serializer=MicroServiceTask__pb2.LoginRequest.SerializeToString,
                response_deserializer=MicroServiceTask__pb2.AuthenticationToken.FromString,
                )
        self.validate = channel.unary_unary(
                '/MicroSerice.AuthService/validate',
                request_serializer=MicroServiceTask__pb2.AuthenticationToken.SerializeToString,
                response_deserializer=MicroServiceTask__pb2.VerifiedUser.FromString,
                )


class AuthServiceServicer(object):
    """Authenticate Service
    """

    def authenticate(self, request, context):
        """Check User Password Authentication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def validate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticate,
                    request_deserializer=MicroServiceTask__pb2.LoginRequest.FromString,
                    response_serializer=MicroServiceTask__pb2.AuthenticationToken.SerializeToString,
            ),
            'validate': grpc.unary_unary_rpc_method_handler(
                    servicer.validate,
                    request_deserializer=MicroServiceTask__pb2.AuthenticationToken.FromString,
                    response_serializer=MicroServiceTask__pb2.VerifiedUser.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MicroSerice.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Authenticate Service
    """

    @staticmethod
    def authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MicroSerice.AuthService/authenticate',
            MicroServiceTask__pb2.LoginRequest.SerializeToString,
            MicroServiceTask__pb2.AuthenticationToken.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def validate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MicroSerice.AuthService/validate',
            MicroServiceTask__pb2.AuthenticationToken.SerializeToString,
            MicroServiceTask__pb2.VerifiedUser.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class HelloServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/MicroSerice.HelloService/SayHello',
                request_serializer=MicroServiceTask__pb2.VerifiedUser.SerializeToString,
                response_deserializer=MicroServiceTask__pb2.GreetingResponse.FromString,
                )


class HelloServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def SayHello(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HelloServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=MicroServiceTask__pb2.VerifiedUser.FromString,
                    response_serializer=MicroServiceTask__pb2.GreetingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MicroSerice.HelloService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HelloService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MicroSerice.HelloService/SayHello',
            MicroServiceTask__pb2.VerifiedUser.SerializeToString,
            MicroServiceTask__pb2.GreetingResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
